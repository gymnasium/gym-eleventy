@use "sass:map";
@use "colors" as *;
@use "breakpoints" as *;
@use "functions" as *;

// via @https://jonnykates.medium.com/automating-colour-contrast-ratios-with-sass-e201f3b52797

// TODO: probably needs some refactoring before beinbg ready for prime time use
@mixin text-contrast($n) {
  $color-brightness: round((red($n) * 299) + (green($n) * 587) + (blue($n) * 114) / 1000);
  $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000);
  @if abs($color-brightness) < ($light-color / 2){
    color: white;
  } @else {
    color: black;
  }
}

// TODO add a mixin to interchangeably convert hex, rgb, hsl



// we now use a separate color map for background colors to avoid CSS bloat.
@mixin bg-colors {
  @each $color, $shades in $bg-colors {
    @if (length($shades) > 1) {
      @each $shade, $value in $shades {
        .bg-#{$color}-#{$shade} {
          background-color: var(--#{$color}-#{$shade});
          --box-shadow-color: var(--#{$color}-#{$shade});
  
          // Automatically set the color based on the HSL lightness value
          @if lightness($value) > 60% {
            color: var(--mono-900);
          } @else {
            color: white;
          }
        }
      }
    } @else {
      @each $shade, $value in $shades {
        .bg-#{$color} {
          background-color: var(--#{$color}-#{$shade});
          --box-shadow-color: var(--#{$color}-#{$shade});

          // Automatically set the color based on the HSL lightness value
          @if lightness($value) > 60% {
            color: var(--mono-900);
          } @else {
            color: white;
          }
        }
      }
    }
  }
}

// Use CSS variables defined above to add box shadow color!
@mixin full-bleed {
  box-shadow: -30rem 0 var(--box-shadow-color), 30rem 0 var(--box-shadow-color), -70rem 0 var(--box-shadow-color), 70rem 0 var(--box-shadow-color), -140rem 0 var(--box-shadow-color), 140rem 0 var(--box-shadow-color);
}

@mixin dotted-bottom($border-color: var(--mono-500)) {
  position: relative;
  z-index: 2;
  overflow-y: visible;

  &::after {
    position: absolute;
    content: '';
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 98.5vw;
    border-bottom: 1px dashed $border-color;
    z-index: -1;
  }
}

@mixin container {
  margin: 0 auto;
  padding: 0 calc(2rem / 2);
  max-width: 100%;

  @include breakpoint(medium) {
    padding: 0 2rem;
  }

  @include breakpoint(large) {
    padding: 0 calc(2rem / 2);
    max-width: convert-to-rem(map.get($breakpoints, 'large'));
  }

  &.stretch {
    max-width: 100%;
  }
}